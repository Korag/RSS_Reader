
@{
    ViewBag.Title = "Index";
}
@section scripts
    {

    <script>
        Vue.component('alert', {
            props: ['text'],
            template: `<div class="alert alert-position" role="alert">
                        {{text}}
                       </div>` 
          })
          Vue.component('contentlist', {
            props: ['item'],
              template:`
                  <div>
                      <div class="row">
                                <div class="col-md-4 col-lg-4 col-sm-12 imageresponsive">
                              <img class="img-fluid" alt="Responsive image" :src="item.image">
                                </div>
                          <div class="col-md-8 col-lg-8 col-sm-12 content">
                              <div class="row">
                                  <p class="dateText col-6 example"> {{ item.date }}</p>
                                  <p class="categoryText col-6 example"><span class="bordercat">{{ item.category }}</span></p>
                              </div>
                              <a class="header row">{{ item.title }}</a>
                              <div class="descriptionText row" v-if="item.flag == 'Text'">{{ item.description }}
                              </div>
                              <div class="audiopos row" v-if="item.flag == 'Podcast'">
                                  <audio controls>
                                      <source :src="item.mp3" type="audio/mpeg">
                                  </audio>
                              </div>
                          </div>
                      </div>
                  </div>`
          })
          Vue.component('categorylist', {
              props: ['category'],
              data: function () {
                  return {
                      ItemStyle: 'row categoryItemUncheck'
                  }
              },
              template: `<div :class="ItemStyle">
                                <label class="col-10" v-on:click="Check">{{category}}</label>
						        <input class="col-2" type="checkbox" v-on:click="$emit('change', category)">
                        </div>`,
              methods: {
                  Check: function () {
                      this.$emit('by-category', this.category);
                      if (this.ItemStyle == 'row categoryItemUncheck') {
                          this.ItemStyle = 'row categoryItemCheck'
                      }
                      else {
                          this.ItemStyle = 'row categoryItemUncheck'
                      }
                  }
              }

          })

        class RssNews {
            constructor(title, category, image, description, date, link, flag) {
                this.title = title.replace(/&quot;/g, '"');
                this.category = category;
                this.image = image;
                this.description = description.replace(/&quot;/g, '"');
                this.date = date;
                this.link = link;
                this.flag = flag
            }
        }
        class RssPodcast {
            constructor(title, category, image, date, mp3, link, flag) {
                this.title = title;
                this.category = category;
                this.image = image;
                this.date = date;
                this.mp3 = mp3;
                this.link = link;
                this.flag = flag
            }
        }
        var app = new Vue({
            el: '#app',
            data: {
                search: '',
                mail: '',
                loading: '',
                alertDisplay: false,
                alertText: '',
                alertStatus: '',
                categoryDisplay: false,
                listStyle: 'col-12',
                apiResponse: [],
                newsList: [],
                categoryList: [],
                filteredList: [],
                filterByCategoryList: [],
                subscribeCategoryList: [],
                displayList: [],
            },
            methods: {
                GetNews: function () {
                    this.$http.get('https://rssreadervertisio.azurewebsites.net/api/RssDocument')
                        .then(response => {
                            this.apiResponse = response.data;
                            this.GetListOfNews(this.apiResponse);
                            this.GetListOfCatergory(this.apiResponse);
                            this.filteredList = [...this.newsList];
                            this.loading = false;
                            this.AddToDisplayList();
                        });
                },
                GetListOfNews: function (apiResponse) {
                    for (let i = 0; i < apiResponse.length; i++) {
                        for (let j = 0; j < apiResponse[i].RssDocumentContent.length; j++) {
                            if (apiResponse[i].Flag == "Text") {
                                this.newsList.push(new RssNews(apiResponse[i].RssDocumentContent[j].Title, apiResponse[i].Title, apiResponse[i].RssDocumentContent[j].Image,
                                    apiResponse[i].RssDocumentContent[j].Description.replace(/<[^>]+>/g, ''), apiResponse[i].RssDocumentContent[j].DateOfPublication,
                                    apiResponse[i].RssDocumentContent[j].Links, apiResponse[i].Flag))
                            }
                            else {
                                this.newsList.push(new RssPodcast(apiResponse[i].RssDocumentContent[j].Title, apiResponse[i].Title, apiResponse[i].Image,
                                    apiResponse[i].RssDocumentContent[j].DateOfPublication, apiResponse[i].RssDocumentContent[j].Image,
                                    apiResponse[i].RssDocumentContent[j].Links, apiResponse[i].Flag))
                            }
                        }
                    }
                },
                GetListOfCatergory: function (apiResponse) {
                    for (let i = 0; i < apiResponse.length; i++) {
                        this.categoryList.push(apiResponse[i].Title);
                    }
                },
                FilteredList: function () {
                    this.filteredList = this.newsList.filter(news => {
                        return news.title.toLowerCase().includes(this.search.toLowerCase())
                    })
                    this.displayList = [];
                    this.AddToDisplayList();
                },
                CategoryShowCheck: function () {
                    this.filteredList = this.newsList.filter(news => {
                        for (var x in this.filterByCategoryList) {
                            if (news.category.toLowerCase() === this.filterByCategoryList[x].toLowerCase()) {
                                return true
                            }
                        }
                        return false
                    })
                    if (this.filteredList.length == 0) {
                        this.filteredList = [...this.newsList];
                    }
                    this.displayList = [];
                    this.AddToDisplayList();
                },
                CompareStrings: function (array,category) {
                    for (var string in array) {
                        if (array[string] === category) {
                            return true
                        }
                    }
                    return false
                },
                FilterByCategory: function (category) {
                    if (this.CompareStrings(this.filterByCategoryList,category)) {
                        this.filterByCategoryList.splice(this.filterByCategoryList.findIndex(filter => {
                            return filter === category
                        }), 1);
                        this.CategoryShowCheck();
                    }
                    else {
                        this.filterByCategoryList.push(category);
                        this.CategoryShowCheck();
                    }
                },
                RefreshSubscribeCategoryList: function (category) {
                    if (this.CompareStrings(category)) {
                       (this.subscribeCategoryList.findIndex(filter => {
                            return filter == category
                        }))
                        this.subscribeCategoryList.splice(this.subscribeCategoryList.findIndex(filter => {
                            return filter === category
                        }), 1);
                    }
                    else {
                        this.subscribeCategoryList.push(category);
                    }
                },
                SubscribeByMail: function () {
                    var formData = new FormData();
                    formData.append("EmailAddress", this.mail);
                    for (var category in this.subscribeCategoryList) {
                        formData.append("SubscriberList", category);
                    }
                    this.$http.post('https://rssreadervertisio.azurewebsites.net/Reader/SubscribeNewsletter', formData)
                        .then(response => {                       
                        })
                },
                AddToDisplayList: function () {
                    if (this.filteredList.length >= 4) {
                        this.displayList = this.displayList.concat(this.filteredList.splice(0, 4));
                    }
                    else {
                        this.displayList = this.displayList.concat(this.filteredList.splice(0, this.filteredList.length));
                    }
                },
                InfiniteScroll: function () {
                    var element = document.getElementById('style-6');
                    element.onscroll = () => {
                        if (element.offsetHeight + element.scrollTop === element.scrollHeight) {
                            this.AddToDisplayList();
                        }
                    }
                },
                DisplayAlert: function (alertText, alertStatus, time) {
                    this.alertDisplay = true;
                    this.alertText = alertText;
                    this.alertStatus = alertStatus;
                    setTimeout(function () { this.alertDisplay = false }.bind(this), 3000);
                },
                ShowCategory: function () {
                    if (this.categoryDisplay == false) {
                        this.categoryDisplay = true;
                        this.listStyle = 'col-9'
                    }
                    else {
                        this.categoryDisplay = false;
                        this.listStyle = 'col-12'
                    }
                    
                }
            },
            created: function () {
                this.loading = true;
                this.GetNews();
            },
            mounted() {
                this.InfiniteScroll();
            }
            })
    </script>
}


<div id="app" class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-lg-3 col-md-12 col-sm-12 card-body row align-items-center d-flex justify-content-center">
            <alert :class="alertStatus" v-bind:text="alertText" v-if="alertDisplay"></alert>
            <button class="categoryButton col-sm-12" v-on:click="ShowCategory">☰ Kategorie</button>
            </div>
            <div class="col-9  card-body row align-items-center d-flex justify-content-center">
                <div>
                    <i class="fas fa-search h4 text-body mr-1 example"></i>
                </div>
                <div>
                    <input class="form-control form-control-lg border-success" v-model="search" type="search" placeholder="Wyszukaj kanał RSS">
                </div>
                <div>
                    <button class="btn btn-lg btn-outline-success ml-1" v-on:click="FilteredList" type="submit">Szukaj</button>
                </div>
            </div>
        </div>
        <div class="row">
            <transition name="slide-fade">
                <div class="col-lg-3 col-md-3 col-sm-3 " v-show="categoryDisplay">
                    <categorylist v-for="category in categoryList"
                                  v-bind:key="category.Name"
                                  v-bind:category="category"
                                  v-on:by-category="FilterByCategory"
                                  v-on:change="RefreshSubscribeCategoryList">

                    </categorylist>
                    <div class="card-body row align-items-center d-flex justify-content-center">
                        <input class="form-control border-success" v-model="mail" placeholder="Wprowadź swój e-mail">
                        <button class="btn btn-outline-success mt-1" v-on:click="SubscribeByMail">Subskrybuj</button>
                    </div>
                </div>
            </transition>

            <div :class="listStyle">
                <div class="lds-facebook col" v-if="loading"><div></div><div></div><div></div></div>
                <div class=" force-overflow scrollbar" id="style-6">
                    <contentlist class="col"
                                 v-for="obj in displayList"
                                 v-bind:item="obj"
                                 v-bind:key="obj.$id">
                    </contentlist>
                </div>
            </div>

        </div>
    </div>